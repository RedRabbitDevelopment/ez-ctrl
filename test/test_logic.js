// Generated by CoffeeScript 1.8.0
(function() {
  var AsyncUserController, FrontEnd, TestData, UserController, UserError, Validator, assert, base, _;

  TestData = require('../test_data/data');

  _ = require('lodash');

  assert = require('assert');

  base = require('../index');

  Validator = base.Validator;

  FrontEnd = base.FrontEnd;

  UserController = require('../test_data/routes/users');

  AsyncUserController = require('../test_data/routes/async_users');

  UserError = base.UserError;

  describe('UserController', function() {
    var FuncDetails;
    FuncDetails = base.FuncDetails;
    beforeEach(function() {
      return TestData.resetData();
    });
    describe('initialization', function() {
      return it('should initialize all their data', function() {
        assert.equal(UserController.modelName, 'User');
        return assert.equal(UserController.basePattern, '/users');
      });
    });
    describe('extractArguments', function() {
      it('should get all the arguments', function() {
        var args;
        args = FuncDetails.extractArguments(function(a, b, c) {});
        return assert.deepEqual(args, ['a', 'b', 'c']);
      });
      it('shouldn\'t care about whitespace', function() {
        var args;
        args = FuncDetails.extractArguments(function( a,   b, 
        c) {});
        return assert.deepEqual(args, ['a', 'b', 'c']);
      });
      it('shouldn\'t care about comments', function() {
        var args;
        args = FuncDetails.extractArguments(function(/* ab */a, 
        // booya stuff
        b, /* d, */c) /*don\'t mess with */{
        
        /* don\'t mess with */ });
        return assert.deepEqual(args, ['a', 'b', 'c']);
      });
      return it('should care about the whitespace and comments', function() {
        var argString, compareTo;
        argString = FuncDetails.extractArgumentString(function(/* ab */a, 
        // booya stuff
        b, /* d, */c) /*don't mess with */{
        
        /* don't mess with */ });
        compareTo = '/* ab */a, ';
        compareTo += '        // booya stuff';
        compareTo += '        b, /* d, */c';
        argString = argString.replace(/\n/g, '');
        return assert.equal(argString, compareTo);
      });
    });
    describe('extractLogicArguments', function() {
      it('should get all the arguments', function() {
        var args, controller_logic;
        controller_logic = function(b, a, c) {
          return 'G';
        };
        args = FuncDetails.dataToArgs(controller_logic, {
          a: 'a',
          b: 'b',
          c: 'c'
        });
        return assert.deepEqual(args, ['b', 'a', 'c']);
      });
      it('should compile all the data into one variable', function() {
        var args, controller_logic;
        controller_logic = function(_data) {
          return 'G';
        };
        args = FuncDetails.dataToArgs(controller_logic, {
          a: 'a',
          b: 'b',
          c: 'c'
        });
        return assert.deepEqual(args, [
          {
            a: 'a',
            b: 'b',
            c: 'c'
          }
        ]);
      });
      return it('should compile all the data into one variable', function() {
        var args, controller_logic;
        controller_logic = function(a, _data) {
          return 'G';
        };
        args = FuncDetails.dataToArgs(controller_logic, {
          a: 'a',
          b: 'b',
          c: 'c'
        });
        return assert.deepEqual(args, [
          'a', {
            b: 'b',
            c: 'c'
          }
        ]);
      });
    });
    describe('getRouteDetails', function() {
      it('should work with query', function() {
        var routeDetails, users;
        routeDetails = UserController.getRouteDetails('query');
        assert.equal(routeDetails.method, 'get');
        assert.equal(routeDetails.pattern, '/users');
        assert.ok(_.isFunction(routeDetails.logic));
        users = routeDetails.logic();
        return assert.equal(users.length, 3);
      });
      it('should work with get', function() {
        var routeDetails, user;
        routeDetails = UserController.getRouteDetails('get');
        assert.equal(routeDetails.method, 'get');
        assert.ok(_.isFunction(routeDetails.logic));
        user = routeDetails.logic(2);
        return assert.deepEqual(user, {
          name: 'Baby Tate',
          username: 'soonToCome',
          password: 'password3'
        });
      });
      it('should work with add', function() {
        var data, johnnyboy, routeDetails, value;
        routeDetails = UserController.getRouteDetails('add');
        assert.equal(routeDetails.method, 'post');
        assert.equal(routeDetails.pattern, '/users');
        assert.ok(_.isFunction(routeDetails.logic));
        johnnyboy = {
          name: 'Johnny Johnson',
          username: 'johnnyboy',
          password: 'password4'
        };
        value = routeDetails.logic(johnnyboy);
        assert.ok(value);
        data = TestData.getData();
        assert.ok(data[3]);
        return assert.deepEqual(data[3], johnnyboy);
      });
      it('should work with save', function() {
        var data, newName, routeDetails, value;
        routeDetails = UserController.getRouteDetails('save');
        assert.equal(routeDetails.method, 'put');
        assert.ok(_.isFunction(routeDetails.logic));
        newName = 'Shirley Tate';
        value = routeDetails.logic(1, {
          name: newName
        });
        assert.okvalue;
        data = TestData.getData();
        assert.ok(data[1]);
        assert.ok(data[1].username, 'hotstuff5');
        return assert.equal(data[1].name, newName);
      });
      return it('should work with a custom method', function() {
        var password, routeDetails, username, value;
        routeDetails = UserController.getRouteDetails('postLogin');
        assert.equal(routeDetails.method, 'post');
        assert.equal(routeDetails.pattern, '/users/login');
        assert.ok(_.isFunction(routeDetails.logic));
        username = 'hotstuff5';
        password = 'password2';
        value = routeDetails.logic(username, password);
        assert.ok(value);
        return assert.throws(function() {
          return value = routeDetails.logic(username, 'wrongpassword');
        }, /Invalid username or password/);
      });
    });
    describe('controller validators', function() {
      var controller;
      controller = null;
      beforeEach(function() {
        return controller = UserController.getController('add');
      });
      it('should get validation', function() {
        assert.ok(controller.validation);
        assert.equal(controller.validation.name.required, true);
        assert.equal(controller.validation.username.required, true);
        return assert.equal(controller.validation.password.required, true);
      });
      it('should pass', function(done) {
        return controller.validate({
          name: 'Kelly Johnson',
          username: 'kellyJohnson',
          password: 'password8'
        }).then(function(result) {
          return done();
        }, function(error) {
          return done(error);
        });
      });
      it('should throw an error', function(done) {
        return controller.validate({
          name: 'Kel',
          username: 'kellyJohnson',
          password: 'password8'
        }).then(function(result) {
          return done(new Error('Didn\'t throw an error'));
        }, function(error) {
          var errors;
          errors = error.errors;
          assert.ok(errors.name);
          assert.equal(error.message, 'Validate');
          assert.equal(errors.name.length, 1);
          assert.equal(errors.name[0], 'String is not in range');
          return done();
        })["catch"](function(error) {
          return done(error);
        });
      });
      it('should throw multiple errors', function(done) {
        return controller.validate({
          name: 'Kel',
          username: 'kel',
          password: 'password8'
        }).then(function(result) {
          return done(new Error('Didn\'t throw an error'));
        }, function(error) {
          var errors;
          errors = error.errors;
          assert.ok(errors.name);
          assert.ok(errors.username);
          assert.equal(errors.username.length, 1);
          assert.equal(errors.name.length, 1);
          assert.equal(errors.name[0], 'String is not in range');
          assert.equal(errors.username[0], 'String is not in range');
          return done();
        })["catch"](function(error) {
          return done(error);
        });
      });
      it('should throw custom errors', function(done) {
        controller = UserController.getController('save');
        return controller.validate({
          id: 18,
          name: 'Kelsey Johnson',
          username: 'yourdeveloperfriend',
          password: 'password8'
        }).then(function(result) {
          return done(new Error('Didn\'t throw an error'));
        }, function(error) {
          console.log('error', error);
          var errors;
          errors = error.errors;
          assert.equal(error.constructor, UserError);
          assert.ok(errors.username);
          assert.ok(errors.id);
          assert.equal(errors.username.length, 1);
          assert.equal(errors.id.length, 1);
          assert.equal(errors.id[0], 'does not exist');
          assert.equal(errors.username[0], 'must be unique');
          return done();
        })["catch"](function(error) {
          return done(error);
        });
      });
      return it('should pass custom errors', function(done) {
        controller = UserController.getController('save');
        return controller.validate({
          id: 2,
          name: 'Kelsey Johnson'
        }).then(function(result) {
          return done();
        }, function(error) {
          return done(error);
        });
      });
    });
    describe('testing logic', function() {
      it('should work as a promise even if the logic isn\'t.', function(done) {
        var controller;
        controller = UserController.getController('postLogin');
        return controller.runLogic({
          password: 'password1',
          username: 'yourdeveloperfriend'
        }).then(function(result) {
          assert.ok(result);
          assert.equal(result, true);
          return done();
        })["catch"](done);
      });
      return it('should catch the error as a promise as well.', function(done) {
        var controller;
        controller = UserController.getController('postLogin');
        return controller.runLogic({
          password: 'notThePassword',
          username: 'yourdeveloperfriend'
        }).then(function(result) {
          return done(new Error('shouldn\'t have resolved.' + JSON.stringify(result)));
        })["catch"](function(error) {
          assert.ok(error);
          assert.equal(error.constructor, UserError);
          assert.equal(error.message, 'Invalid username or password');
          return done();
        });
      });
    });
    describe('front-end functionality', function() {
      var frontEnd;
      frontEnd = null;
      beforeEach(function() {
        frontEnd = new FrontEnd();
        frontEnd.addController(UserController);
        return frontEnd.addController(AsyncUserController);
      });
      it('should give me all the routes', function() {
        var allRoutes;
        allRoutes = frontEnd.controllerManager.getAllRoutes();
        return assert.ok(allRoutes.AsyncUser && allRoutes.User);
      });
      return it('should give me a string', function() {
        var e, frontEndMethods;
        frontEndMethods = frontEnd.getFrontEndMethods();
        assert.ok(frontEndMethods);
        try {

        } catch (_error) {
          e = _error;
          return assert["catch"]('', e);
        }
      });
    });
    return describe('converter', function() {
      var Converter;
      Converter = base.Converter;
      it('should convert a string to an integer', function() {
        return assert.strictEqual(Converter.convertField('5', 'int'), 5);
      });
      it('should convert a string to an float', function() {
        return assert.strictEqual(Converter.convertField('55.5', 'float'), 55.5);
      });
      it('shouldn\'t convert something it doesn\'t recognize', function() {
        return assert.equal(Converter.convertField('abcda', 'fakeType'), 'abcda');
      });
      it('should convert a non-integer string to NaN', function() {
        return assert.ok(_.isNaN(Converter.convertField('abcda', 'int')));
      });
      return it('should convert a whole group of values', function() {
        var newData;
        newData = Converter.convert({
          booya: {
            type: 'int'
          },
          gee: {
            type: 'float'
          }
        }, {
          booya: '5',
          gee: '77.2',
          wizz: '12'
        });
        assert.strictEqual(newData.booya, 5);
        assert.strictEqual(newData.gee, 77.2);
        return assert.strictEqual(newData.wizz, '12');
      });
    });
  });

}).call(this);
