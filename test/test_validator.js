// Generated by CoffeeScript 1.6.3
(function() {
  var UserError, Validator, assert;

  Validator = require('../').Validator;

  UserError = require('../').UserError;

  assert = require('assert');

  describe('Validator', function() {
    it("should get the appropriate messages", function(done) {
      return Validator.validate({
        name: {
          required: true,
          len: 9
        },
        username: {
          required: true,
          type: 'alphaNumeric',
          unique: true,
          len: 9
        },
        password: {
          required: true,
          type: 'alphaNumeric',
          len: 8
        }
      }, {
        name: "Booya Baby"
      }).then(function() {
        return done(new Error("didn't throw error"));
      }).fail(function(result) {
        assert.ok(result instanceof UserError);
        assert.equal(result.message, 'Validate');
        assert.equal(result.errors.username.length, 1);
        assert.equal(result.errors.username[0], 'is required');
        assert.equal(result.errors.password.length, 1);
        assert.equal(result.errors.password[0], 'is required');
        return done();
      }).fail(function(error) {
        return done(error);
      });
    });
    it("should fail", function(done) {
      return Validator.runValidate(void 0, "required", true, "username").then(function(result) {
        return done(result);
      }, function(error) {
        assert.equal(error, 'is required');
        return done();
      }).fail(function(result) {
        return done(result);
      });
    });
    it("should give me an appropriate error", function(done) {
      return Validator.runValidate("no-oolong", "len", 8, "username").then(function(result) {
        return done();
      }, function(error) {
        assert.equal(error, 'is required');
        return done();
      }).fail(function(result) {
        return done(result);
      });
    });
    it("should get me a readable error", function(done) {
      return Validator.validateField({
        required: true
      }, "username", void 0, true).then(function(result) {
        return done(new Error("didn't fail"));
      }, function(result) {
        assert.equal(result.field, "username");
        assert.equal(result.errors.length, 1);
        assert.equal(result.errors[0], "is required");
        return done();
      }).fail(function(error) {
        return done(error);
      });
    });
    it("should get me multiple readable errors", function(done) {
      return Validator.validateField({
        len: 8,
        type: "alphanumeric"
      }, "username", "no-long", true).then(function(result) {
        return done(new Error("didn't fail"));
      }, function(result) {
        assert.equal(result.field, "username");
        assert.equal(result.errors.length, 2);
        assert.equal(result.errors[0], "String is not in range");
        assert.equal(result.errors[1], "must be alphanumeric");
        return done();
      }).fail(function(error) {
        return done(error);
      });
    });
    it('should be able to handle complex validation', function(done) {
      return Validator.validate({
        array: {
          type: ['text']
        }
      }, {
        array: ['booya', 'one', 'two']
      }).then(function() {
        return done();
      }, function(error) {
        if (error instanceof Error) {
          return done(error);
        } else {
          return done(new Error('threw an error' + JSON.stringify(error)));
        }
      });
    });
    it('should be able to give us a complex error', function(done) {
      return Validator.validate({
        array: {
          type: ['text']
        }
      }, {
        array: ['booya', 5, 'two']
      }).then(function(result) {
        return done(new Error('Got Result'));
      }).fail(function(result) {
        var _ref;
        assert.ok(result instanceof UserError);
        assert.ok(result != null ? (_ref = result.errors) != null ? _ref.array : void 0 : void 0);
        assert.equal(result.errors.array[0], 'should be an array of text');
        return done();
      }).fail(done);
    });
    return it('should pass on 0 or empty string', function(done) {
      return Validator.validate({
        name: {
          required: true
        }
      }, {
        name: 0
      }).then(function(result) {
        return done();
      }).fail(done);
    });
  });

}).call(this);
