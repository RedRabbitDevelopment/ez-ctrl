// Generated by CoffeeScript 1.6.3
(function() {
  define(['q'], function(q) {
    return this.EZAccess = {
      _constructPath: function(pattern, data) {
        var param, params, value, variable, variables;
        params = pattern.split('/');
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = params.length; _i < _len; _i++) {
            param = params[_i];
            if (variables = param.match(/^:(.*?)(\(.*?\))?$/)) {
              variable = variables[1];
              value = data[variable];
              delete data[variable];
              _results.push(value);
            } else {
              _results.push(param);
            }
          }
          return _results;
        })()).join("/");
      },
      _constructQuery: function(data) {
        var key, result, value;
        result = (function() {
          var _ref, _results;
          _ref = data || {};
          _results = [];
          for (key in _ref) {
            value = _ref[key];
            if (value != null) {
              _results.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
            }
          }
          return _results;
        })();
        if (result.length > 0) {
          return "?" + result.join("&");
        } else {
          return "";
        }
      },
      _isFunction: function(obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
      },
      _makeRequest: function(routeDetails, args) {
        var data,
          _this = this;
        data = this._extractData(routeDetails.argList, args);
        return (function(data) {
          var path;
          path = _this._constructPath(routeDetails.pattern, data);
          if (routeDetails.method === 'get') {
            path = path + _this._constructQuery(data);
          }
          return _this._makeRequestBase(routeDetails.method, path, data).then(function(result) {
            var error;
            if (result.success) {
              return result.response;
            } else {
              error = new Error(result.error);
              error.errors = result.errors;
              throw error;
            }
          });
        })(data);
      },
      _makeRequestBase: function(method, path, data) {
        var deferred, xmlhttp,
          _this = this;
        deferred = q.defer();
        xmlhttp = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
        xmlhttp.onreadystatechange = function() {
          var e;
          if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
            try {
              return deferred.resolve(JSON.parse(xmlhttp.responseText));
            } catch (_error) {
              e = _error;
              console.log("EZAccessError: Response not in valid JSON", xml.responseText);
              return deferred.reject(error, "EZAccessError: Response not in valid JSON", xml.responseText);
            }
          }
        };
        if (method === 'get') {
          xmlhttp.open(method, path, true);
          xmlhttp.send();
        } else {
          xmlhttp.open(method, path, true);
          xmlhttp.setRequestHeader('Content-Type', 'application/json');
          xmlhttp.send(JSON.stringify(data));
        }
        return deferred.promise;
      }
    };
  });

}).call(this);
