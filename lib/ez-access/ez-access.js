// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (function(generator) {
    var Bluebird, _;
    if ((typeof exports !== "undefined" && exports !== null) && module.exports) {
      Bluebird = require('bluebird');
      _ = require('lodash');
      return module.exports = generator(Bluebird, _);
    } else if ((typeof define !== "undefined" && define !== null) && define.amd) {
      return define(['bluebird', 'lodash'], generator);
    } else {
      return window.EZAccess = generator(window.Bluebird, window._);
    }
  })(function(Bluebird, _) {
    var BaseController, Batch, BatchController, Controller, EZAccess;
    BaseController = (function() {
      function BaseController(_details) {
        this._details = _details;
        _.assign(this, this._details);
      }

      BaseController.prototype._constructPath = function(pattern, data) {
        var param, params, path, url, value, variable, variables;
        params = pattern.split('/');
        path = ((function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = params.length; j < len; j++) {
            param = params[j];
            if (variables = param.match(/^:(.*?)(\(.*?\))?$/)) {
              variable = variables[1];
              value = data[variable];
              delete data[variable];
              results1.push(value);
            } else {
              results1.push(param);
            }
          }
          return results1;
        })()).join("/");
        if (EZAccess.hostname) {
          url = "//" + EZAccess.hostname + path;
          if (EZAccess.protocol) {
            return EZAccess.protocol + ":" + url;
          } else {
            return url;
          }
        } else {
          return path;
        }
      };

      BaseController.prototype._isPrimitive = function(value) {
        return _.some([_.isNumber, _.isString, _.isBoolean, _.isNull, _.isUndefined], function(fn) {
          return fn(value);
        });
      };

      BaseController.prototype._serialize = function(obj, prefix) {
        var i, j, key, len, str, value;
        str = [];
        if (obj == null) {
          null;
        } else if (obj.length != null) {
          if (prefix && obj.length > 20 && _.every(obj, this._isPrimitive)) {
            str.push(prefix + '=' + encodeURIComponent(JSON.stringify(obj)));
          } else {
            for (i = j = 0, len = obj.length; j < len; i = ++j) {
              value = obj[i];
              key = prefix ? prefix + "[" + i + "]" : i;
              if (value !== void 0) {
                str.push(typeof value === 'object' ? this._serialize(value, key) : key + "=" + encodeURIComponent(value));
              }
            }
          }
        } else {
          for (key in obj) {
            value = obj[key];
            key = prefix ? prefix + "[" + key + "]" : encodeURIComponent(key);
            if (value !== void 0) {
              str.push(typeof value === 'object' ? this._serialize(value, key) : key + "=" + encodeURIComponent(value));
            }
          }
        }
        return str.join("&");
      };

      BaseController.prototype._constructQuery = function(data) {
        var result;
        result = this._serialize(data);
        if (result.length > 0) {
          return "?" + result;
        } else {
          return "";
        }
      };

      BaseController.prototype._isFunction = function(obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
      };

      BaseController.prototype._makeRequestBase = function(method, path, data) {
        return new Bluebird(function(resolve, reject) {
          var xmlhttp;
          xmlhttp = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
          xmlhttp.onreadystatechange = (function(_this) {
            return function() {
              var e, error1;
              if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
                try {
                  return resolve(JSON.parse(xmlhttp.responseText));
                } catch (error1) {
                  e = error1;
                  console.log("EZAccessError: Response not in valid JSON", xml.responseText);
                  return reject(error, "EZAccessError: Response not in valid JSON", xml.responseText);
                }
              }
            };
          })(this);
          if (method === 'get') {
            xmlhttp.open(method, path, true);
            return xmlhttp.send();
          } else {
            xmlhttp.open(method, path, true);
            xmlhttp.setRequestHeader('Content-Type', 'application/json');
            return xmlhttp.send(JSON.stringify(data));
          }
        });
      };

      BaseController.prototype.interpretResult = function(result) {
        var error;
        if (result.success) {
          return result.response;
        } else {
          error = new Error(result.error);
          error.errors = result.errors;
          throw error;
        }
      };

      return BaseController;

    })();
    Controller = (function(superClass) {
      extend(Controller, superClass);

      function Controller() {
        return Controller.__super__.constructor.apply(this, arguments);
      }

      Controller.prototype._makeRequest = function(routeDetails, args, controllerName, methodName) {
        var data;
        data = EZAccess._extractData(routeDetails.argList, args);
        return ((function(_this) {
          return function(data) {
            var path;
            path = _this._constructPath(routeDetails.pattern, data);
            if (routeDetails.method === 'get') {
              path = path + _this._constructQuery(data);
            }
            return _this._makeRequestBase(routeDetails.method, path, data).then(_this.interpretResult);
          };
        })(this))(data);
      };

      return Controller;

    })(BaseController);
    BatchController = (function(superClass) {
      extend(BatchController, superClass);

      function BatchController(_details) {
        this._details = _details;
        BatchController.__super__.constructor.apply(this, arguments);
      }

      BatchController.prototype._makeRequest = function(routeDetails, args, controllerName, methodName) {
        return {
          args: EZAccess._extractData(routeDetails.argList, args),
          controllerName: controllerName,
          methodName: methodName
        };
      };

      return BatchController;

    })(BaseController);
    Batch = (function(superClass) {
      extend(Batch, superClass);

      function Batch() {
        this.requests = {};
        this.num = 0;
        EZAccess.controllers.map((function(_this) {
          return function(controllerName) {
            return _this[controllerName] = Batch[controllerName];
          };
        })(this));
      }

      Batch.prototype.getRequestId = function() {
        return this.num++;
      };

      Batch.prototype.get = function(varName, request) {
        var key, results1, value;
        if (_.isString(varName)) {
          return this.requests[varName] = request;
        } else {
          results1 = [];
          for (key in varName) {
            value = varName[key];
            results1.push(this.get(key, value));
          }
          return results1;
        }
      };

      Batch.prototype.flush = function(ignoreFailures) {
        var path, url;
        path = "/get-batch" + (this._constructQuery(this.requests));
        url = EZAccess.hostname ? (url = "//" + EZAccess.hostname + path, EZAccess.protocol ? EZAccess.protocol + ":" + url : url) : path;
        return this._makeRequestBase('get', url).then((function(_this) {
          return function(results) {
            if (ignoreFailures) {
              return results;
            } else {
              return _.mapValues(results, _this.interpretResult);
            }
          };
        })(this));
      };

      return Batch;

    })(BaseController);
    return EZAccess = {
      BaseController: BaseController,
      Controller: Controller,
      BatchController: BatchController,
      Batch: Batch,
      controllers: [],
      eventualObject: function(promise) {
        var shell;
        shell = {};
        shell._promise = promise.then(function(result) {
          var key, value;
          for (key in result) {
            value = result[key];
            shell[key] = value;
          }
          return shell;
        });
        return shell;
      },
      eventualArray: function(promise) {
        var shell;
        shell = [];
        shell._promise = promise.then(function(result) {
          var i, j, len, value;
          for (i = j = 0, len = result.length; j < len; i = ++j) {
            value = result[i];
            shell.push(result[i]);
          }
          return shell;
        });
        return shell;
      },
      eventualValue: function(promise) {
        var shell;
        shell = {
          value: null
        };
        promise.then(function(result) {
          return shell.value = result;
        });
        return shell;
      }
    };
  });

}).call(this);
