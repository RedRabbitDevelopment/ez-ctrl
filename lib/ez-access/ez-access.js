// Generated by CoffeeScript 1.6.3
(function() {
  var EZAccess;

  EZAccess = (function() {
    return {
      _constructPath: function(pattern, data) {
        var param, params, value, variable, variables;
        params = pattern.split('/');
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = params.length; _i < _len; _i++) {
            param = params[_i];
            if (variables = param.match(/^:(.*?)(\(.*?\))?$/)) {
              variable = variables[1];
              value = data[variable];
              delete data[variable];
              _results.push(value);
            } else {
              _results.push(param);
            }
          }
          return _results;
        })()).join("/");
      },
      _constructQuery: function(data) {
        var key, result, value;
        result = (function() {
          var _ref, _results;
          _ref = data || {};
          _results = [];
          for (value in _ref) {
            key = _ref[value];
            _results.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
          }
          return _results;
        })();
        if (result.length > 0) {
          return "?" + result.join("&");
        } else {
          return "";
        }
      },
      _isFunction: function(obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
      },
      _makeRequest: function(routeDetails, args) {
        var data;
        data = EZAccess._extractData(routeDetails.argList, args);
        return Validator.validate(routeDetails.validation, data).then(function(data) {
          var deferred, path, query, xmlhttp;
          deferred = Q.defer();
          xmlhttp = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
          path = EZAccess._constructPath(routeDetails.pattern, data);
          xmlhttp.onreadystatechange = function() {
            var e, result;
            if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
              try {
                result = JSON.parse(xmlhttp.responseText);
                if (result.success) {
                  return deferred.resolve(result.response);
                } else {
                  return deferred.reject(result.error);
                }
              } catch (_error) {
                e = _error;
                console.log("EZAccessError: Response not in valid JSON", xml.responseText);
                return deferred.reject(error, "EZAccessError: Response not in valid JSON", xml.responseText);
              }
            }
          };
          if (routeDetails.method === "get") {
            query = EZAccess._constructQuery(data);
            xmlhttp.open(routeDetails.method, path + query, true);
            xmlhttp.send();
          } else {
            xmlhttp.open(routeDetails.method, path, true);
            xmlhttp.setRequestHeader("Content-type", "application/json");
            xmlhttp.send(JSON.stringify(data));
          }
          return deferred.promise;
        });
      }
    };
  })();

}).call(this);
