// Generated by CoffeeScript 1.6.3
(function() {
  (function(generator) {
    var Q, _;
    if ((typeof exports !== "undefined" && exports !== null) && module.exports) {
      Q = require('q');
      _ = require('underscore');
      return module.exports = generator(Q, _);
    } else if ((typeof define !== "undefined" && define !== null) && define.amd) {
      return define(['q', 'underscore'], generator);
    } else {
      return window.EZAccess = generator(Q, _);
    }
  })(function(Q, _) {
    var EZAccess;
    return EZAccess = {
      eventualObject: function(promise) {
        var shell;
        shell = {};
        shell._promise = promise.then(function(result) {
          var key, value;
          for (key in result) {
            value = result[key];
            shell[key] = value;
          }
          return shell;
        });
        return shell;
      },
      eventualArray: function(promise) {
        var shell;
        shell = [];
        shell._promise = promise.then(function(result) {
          var i, value, _i, _len;
          for (i = _i = 0, _len = result.length; _i < _len; i = ++_i) {
            value = result[i];
            shell.push(result[i]);
          }
          return shell;
        });
        return shell;
      },
      eventualValue: function(promise) {
        var shell;
        shell = {
          value: null
        };
        promise.then(function(result) {
          return shell.value = result;
        });
        return shell;
      },
      _constructPath: function(pattern, data) {
        var param, params, path, value, variable, variables;
        params = pattern.split('/');
        path = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = params.length; _i < _len; _i++) {
            param = params[_i];
            if (variables = param.match(/^:(.*?)(\(.*?\))?$/)) {
              variable = variables[1];
              value = data[variable];
              delete data[variable];
              _results.push(value);
            } else {
              _results.push(param);
            }
          }
          return _results;
        })()).join("/");
        if (EZAccess.hostname) {
          return "//" + EZAccess.hostname + path;
        } else {
          return path;
        }
      },
      _serialize: function(obj, prefix) {
        var i, key, str, value, _i, _len;
        str = [];
        if (obj.length != null) {
          for (i = _i = 0, _len = obj.length; _i < _len; i = ++_i) {
            value = obj[i];
            key = prefix ? prefix + "[]" : i;
            if (value !== void 0) {
              str.push(typeof value === 'object' ? this._serialize(value, key) : encodeURIComponent(key) + "=" + encodeURIComponent(value));
            }
          }
        } else {
          for (key in obj) {
            value = obj[key];
            key = prefix ? prefix + "[" + key + "]" : key;
            if (value !== void 0) {
              str.push(typeof value === 'object' ? this._serialize(value, key) : encodeURIComponent(key) + "=" + encodeURIComponent(value));
            }
          }
        }
        return str.join("&");
      },
      _constructQuery: function(data) {
        var result;
        result = this._serialize(data);
        if (result.length > 0) {
          return "?" + result;
        } else {
          return "";
        }
      },
      _isFunction: function(obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
      },
      _makeRequest: function(routeDetails, args) {
        var data,
          _this = this;
        data = this._extractData(routeDetails.argList, args);
        return (function(data) {
          var path;
          path = _this._constructPath(routeDetails.pattern, data);
          if (routeDetails.method === 'get') {
            path = path + _this._constructQuery(data);
          }
          return _this._makeRequestBase(routeDetails.method, path, data).then(function(result) {
            var error;
            if (result.success) {
              return result.response;
            } else {
              error = new Error(result.error);
              error.errors = result.errors;
              throw error;
            }
          });
        })(data);
      },
      _makeRequestBase: function(method, path, data) {
        var deferred, xmlhttp,
          _this = this;
        deferred = q.defer();
        xmlhttp = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
        xmlhttp.onreadystatechange = function() {
          var e;
          if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
            try {
              return deferred.resolve(JSON.parse(xmlhttp.responseText));
            } catch (_error) {
              e = _error;
              console.log("EZAccessError: Response not in valid JSON", xml.responseText);
              return deferred.reject(error, "EZAccessError: Response not in valid JSON", xml.responseText);
            }
          }
        };
        if (method === 'get') {
          xmlhttp.open(method, path, true);
          xmlhttp.send();
        } else {
          xmlhttp.open(method, path, true);
          xmlhttp.setRequestHeader('Content-Type', 'application/json');
          xmlhttp.send(JSON.stringify(data));
        }
        return deferred.promise;
      }
    };
  });

}).call(this);
