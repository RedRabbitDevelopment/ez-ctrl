// Generated by CoffeeScript 1.6.3
var ControllerManager, FrontEnd, FuncDetails, frontEndJS, _;

_ = require('underscore');

ControllerManager = require('../ez-ctrl/manager');

FuncDetails = require('../ez-ctrl/func-details');

frontEndJS = null;

module.exports = FrontEnd = {
  registerRoutes: function(app) {
    var controller, _i, _len, _ref;
    _ref = ControllerManager.controllers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      controller = _ref[_i];
      controller.registerRoutes(app);
    }
    app.get('/js/lib/ez-routes.js', function(req, res) {
      if (!frontEndJS) {
        frontEndJS = FrontEnd.getFrontEndMethods();
      }
      res.setHeader('Content-Type', 'application/x-javascript; charset=UTF-8');
      return res.end(frontEndJS);
    });
    app.get('/js/lib/ez-access.js', function(req, res) {
      return res.sendfile(__dirname + "/ez-access.js");
    });
    return app.get('/js/lib/ez-validation.js', function(req, res) {
      return res.sendfile(__dirname + "/validator.js");
    });
  },
  getFrontEndMethods: function() {
    var EZAccess, argString, controller, controllerDetails, funcDetails, funcName, funcString, routes;
    routes = ControllerManager.getAllRoutes();
    EZAccess = {};
    EZAccess._extractData = FuncDetails.argsToData;
    for (controller in routes) {
      controllerDetails = routes[controller];
      EZAccess[controller] = {};
      EZAccess[controller]._routeDetails = {};
      for (funcName in controllerDetails) {
        funcDetails = controllerDetails[funcName];
        argString = FuncDetails.extractArgumentString(funcDetails.logic);
        EZAccess[controller]._routeDetails[funcName] = {
          pattern: funcDetails.pattern,
          usesId: funcDetails.usesId,
          method: funcDetails.method,
          validation: funcDetails.validation,
          argList: FuncDetails.extractArguments(funcDetails.logic)
        };
        funcString = "(function(" + argString + ") {\n" + "	return EZAccess._makeRequest(this._routeDetails['" + funcName + "'], arguments);\n" + "});";
        EZAccess[controller][funcName] = eval(funcString);
      }
    }
    return this.convertToFrontEnd(EZAccess);
  },
  convertToFrontEnd: function(object) {
    var field, output, value;
    output = "";
    for (field in object) {
      value = object[field];
      output += ("EZAccess['" + field + "'] = ") + this.convertToFrontEndRaw(value);
      output += ";\n";
    }
    return output;
  },
  convertToFrontEndRaw: function(object, depth) {
    var field, lastNewLine, object_item, output, tabs, tabs2, value;
    if (depth == null) {
      depth = 0;
    }
    tabs = this.getTabs(depth);
    tabs2 = this.getTabs(depth + 1);
    if (_.isFunction(object)) {
      output = object.toString().replace(/\n\s*/mg, '\n' + tabs2);
      lastNewLine = output.indexOf("\n");
      return output = output.substring(0, lastNewLine) + output.substring(lastNewLine).replace(/\n\s*/m, "\n" + tabs);
    } else if (_.isArray(object)) {
      output = "[\n";
      output += tabs2 + ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = object.length; _i < _len; _i++) {
          object_item = object[_i];
          _results.push(this.convertToFrontEndRaw(object_item, depth + 1));
        }
        return _results;
      }).call(this)).join(",\n" + tabs2) + "\n";
      output += tabs + "]";
      return output;
    } else if (_.isObject(object)) {
      output = "{\n";
      output += tabs2 + ((function() {
        var _results;
        _results = [];
        for (field in object) {
          value = object[field];
          _results.push(field + ": " + this.convertToFrontEndRaw(value, depth + 1));
        }
        return _results;
      }).call(this)).join(",\n" + tabs2) + "\n";
      output += tabs + "}";
      return output;
    } else if (_.isNumber(object) || _.isBoolean(object)) {
      return "" + object;
    } else if (_.isString(object)) {
      return "'" + object + "'";
    } else {
      return 'undefined';
    }
  },
  getTabs: _.memoize(function(depth) {
    return ((function() {
      var _results;
      _results = [];
      while (depth--) {
        _results.push("\t");
      }
      return _results;
    })()).join("");
  })
};
