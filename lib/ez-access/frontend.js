// Generated by CoffeeScript 1.7.1
(function() {
  var ControllerManager, FrontEnd, FuncDetails, Q, frontEndJS, _;

  _ = require('lodash');

  ControllerManager = require('../ez-ctrl/manager');

  FuncDetails = require('../ez-ctrl/func-details');

  Q = require('q');

  frontEndJS = null;

  module.exports = FrontEnd = (function() {
    function FrontEnd() {
      this.controllerManager = new ControllerManager();
    }

    FrontEnd.prototype.registerRoutes = function(app, dirname, dynoScripts) {
      var initPromise;
      initPromise = dirname ? this.controllerManager.readdir(dirname) : Q.when(true);
      return initPromise.then((function(_this) {
        return function() {
          _this.controllerManager.registerRoutes(app);
          if (dynoScripts) {
            app.get('/js/lib/ez-routes.js', function(req, res) {
              if (!frontEndJS) {
                frontEndJS = _this.getFrontEndMethods();
              }
              res.setHeader('Content-Type', 'application/x-javascript; charset=UTF-8');
              return res.end(frontEndJS);
            });
            app.get('/js/lib/ez-access.js', function(req, res) {
              return res.sendfile(__dirname + "/ez-access.js");
            });
            app.get('/js/lib/ez-access-angular.js', function(req, res) {
              return res.sendfile(__dirname + "/ez-access-angular.js");
            });
            app.get('/js/lib/ez-validation.js', function(req, res) {
              return res.sendfile(__dirname + "/validator.js");
            });
          }
          return app.get('/get-batch', function(req, res) {
            var response;
            response = {};
            return Q.all(_.map(req.query, function(value, key) {
              var Controller, controller;
              Controller = _this.controllerManager.controllers[value.controllerName];
              controller = Controller.getController(value.methodName);
              return controller.run(req, res, value.args || {}).then(function(result) {
                return response[key] = result;
              });
            })).then(function() {
              return res.json(response);
            });
          });
        };
      })(this));
    };

    FrontEnd.prototype.addController = function(ctrl) {
      return this.controllerManager.addController(ctrl);
    };

    FrontEnd.prototype.getFrontEndMethods = function(hostname, protocol) {
      var EZAccess, argString, controller, controllerDetails, controllers, funcDetails, funcName, funcString, routes;
      routes = this.controllerManager.getAllRoutes();
      EZAccess = {};
      EZAccess._extractData = FuncDetails.argsToData;
      controllers = {};
      for (controller in routes) {
        controllerDetails = routes[controller];
        controllers[controller] = {};
        controllers[controller]._routeDetails = {};
        for (funcName in controllerDetails) {
          funcDetails = controllerDetails[funcName];
          if (funcDetails.logic == null) {
            throw new Error("Controller " + controller + " does not have logic for " + funcName);
          }
          argString = FuncDetails.extractArgumentString(funcDetails.logic);
          controllers[controller]._routeDetails[funcName] = {
            pattern: funcDetails.pattern,
            usesId: funcDetails.usesId,
            method: funcDetails.method,
            validation: funcDetails.validation,
            argList: FuncDetails.extractArguments(funcDetails.logic)
          };
          funcString = "(function(" + argString + ") {\n" + "  return this._makeRequest(this._routeDetails['" + funcName + "'], arguments, '" + controller + "', '" + funcName + "');\n" + "});\n";
          controllers[controller][funcName] = eval(funcString);
        }
      }
      if (hostname) {
        EZAccess.hostname = hostname;
      }
      if (protocol) {
        EZAccess.protocol = protocol;
      }
      return this.convertToFrontEnd(EZAccess, controllers);
    };

    FrontEnd.prototype.convertToFrontEnd = function(object, controllers) {
      var controller, controllerName, field, output, value;
      output = "(function(generator) {\n if(typeof module !== 'undefined' && module.exports) {\n module.exports = generator(require('ez-access'), require('lodash'));\n } else if (typeof define !== 'undefined' && define.amd) {\n define(['ez-access', 'lodash'], generator);\n } else {\n window.EZRoutes = generator(window.EZAccess, window._);\n }\n })(function(EZAccess, _) {\n";
      for (field in object) {
        value = object[field];
        output += ("  EZAccess['" + field + "'] = ") + this.convertToFrontEndRaw(value, 1);
        output += ";\n";
      }
      for (controllerName in controllers) {
        controller = controllers[controllerName];
        output += ("  EZAccess['" + controllerName + "'] = new EZAccess.Controller(") + this.convertToFrontEndRaw(controller, 1) + ");\n";
        output += ("  EZAccess.Batch['" + controllerName + "'] = new EZAccess.BatchController(") + this.convertToFrontEndRaw(controller, 1) + ");\n";
        output += "  EZAccess.controllers.push('" + controllerName + "');\n";
      }
      output += "});\n";
      return output;
    };

    FrontEnd.prototype.convertToFrontEndRaw = function(object, depth) {
      var field, lastNewLine, object_item, output, tabs, tabs2, value;
      if (depth == null) {
        depth = 0;
      }
      tabs = this.getTabs(depth);
      tabs2 = this.getTabs(depth + 1);
      if (_.isFunction(object)) {
        output = object.toString().replace(/\n\s*/mg, '\n' + tabs2);
        lastNewLine = output.indexOf("\n");
        return output = output.substring(0, lastNewLine) + output.substring(lastNewLine).replace(/\n\s*/m, "\n" + tabs);
      } else if (_.isArray(object)) {
        output = "[\n";
        output += tabs2 + ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = object.length; _i < _len; _i++) {
            object_item = object[_i];
            _results.push(this.convertToFrontEndRaw(object_item, depth + 1));
          }
          return _results;
        }).call(this)).join(",\n" + tabs2) + "\n";
        output += tabs + "]";
        return output;
      } else if (_.isObject(object)) {
        output = "{\n";
        output += tabs2 + ((function() {
          var _results;
          _results = [];
          for (field in object) {
            value = object[field];
            _results.push(field + ": " + this.convertToFrontEndRaw(value, depth + 1));
          }
          return _results;
        }).call(this)).join(",\n" + tabs2) + "\n";
        output += tabs + "}";
        return output;
      } else if (_.isNumber(object) || _.isBoolean(object)) {
        return "" + object;
      } else if (_.isString(object)) {
        return "'" + (object.replace('"', '\\"').replace("'", "\\'")) + "'";
      } else {
        return 'undefined';
      }
    };

    FrontEnd.prototype.getTabs = _.memoize(function(depth) {
      return ((function() {
        var _results;
        _results = [];
        while (depth--) {
          _results.push("  ");
        }
        return _results;
      })()).join("");
    });

    return FrontEnd;

  })();

}).call(this);
