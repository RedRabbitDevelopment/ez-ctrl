// Generated by CoffeeScript 1.10.0
(function() {
  var Bluebird, ControllerManager, _, fs;

  _ = require('lodash');

  Bluebird = require('bluebird');

  fs = require('fs');

  Bluebird.promisifyAll(fs);

  module.exports = ControllerManager = (function() {
    function ControllerManager() {
      this.controllers = {};
    }

    ControllerManager.prototype.getAllRoutes = function() {
      return _.reduce(this.controllers, function(memo, controller) {
        if (controller.modelName) {
          memo[controller.modelName] = controller.getRoutes();
        }
        return memo;
      }, {});
    };

    ControllerManager.prototype.readdir = function(dirname) {
      return fs.readdirAsync(dirname).then((function(_this) {
        return function(files) {
          _this.loadFiles(dirname, files, '.js');
          if (Object.keys(_this.controllers).length === 0) {
            return _this.loadFiles(dirname, files, '.coffee');
          }
        };
      })(this));
    };

    ControllerManager.prototype.loadFiles = function(dirname, files, ext) {
      var Controller, file, hasExtension, i, index, isHidden, isTest, len, results;
      results = [];
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        hasExtension = -1 !== (index = file.indexOf(ext));
        isTest = -1 !== file.indexOf('.spec' + ext);
        isHidden = 0 === file.indexOf('.');
        if (hasExtension && !isTest && !isHidden) {
          file = file.substr(0, index);
          Controller = require(dirname + "/" + file);
          results.push(this.addController(Controller));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    ControllerManager.prototype.registerRoutes = function(app) {
      var controller, name, ref, results;
      ref = this.controllers;
      results = [];
      for (name in ref) {
        controller = ref[name];
        results.push(controller.registerRoutes(app));
      }
      return results;
    };

    ControllerManager.prototype.addController = function(ctrl) {
      if (ctrl && ctrl.isController && !ctrl.isAbstract) {
        return this.controllers[ctrl.modelName] = ctrl;
      }
    };

    return ControllerManager;

  })();

}).call(this);
