// Generated by CoffeeScript 1.10.0
(function() {
  var Converter, ConverterMethods, _;

  _ = require('lodash');

  ConverterMethods = {
    int: function(value) {
      return ConverterMethods.float(value);
    },
    float: function(value) {
      return parseFloat(value);
    },
    boolean: function(value) {
      if (_.isString(value)) {
        return value === 'true';
      } else {
        return !!value;
      }
    },
    date: function(value) {
      return new Date(value);
    }
  };

  module.exports = Converter = {
    convert: function(types, data) {
      var field, value;
      for (field in types) {
        value = types[field];
        value = data[field];
        if (value) {
          data[field] = this.convertField(value, types[field].type);
        }
      }
      return data;
    },
    convertField: function(value, type) {
      var e, error, i, index, len, val;
      if (_.isArray(type) || _.isArray(value)) {
        if (_.isString(value)) {
          try {
            value = JSON.parse(value);
          } catch (error) {
            e = error;
          }
        }
        if (!(_.isArray(type) && _.isArray(value))) {
          return value;
        } else {
          for (index = i = 0, len = value.length; i < len; index = ++i) {
            val = value[index];
            value[index] = this.convertField(val, type[0]);
          }
          return value;
        }
      } else if (ConverterMethods[type]) {
        return ConverterMethods[type](value);
      } else {
        return value;
      }
    },
    registerConverter: function(name, converter) {
      return ConverterMethods[name] = converter;
    }
  };

}).call(this);
