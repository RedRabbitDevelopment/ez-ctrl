// Generated by CoffeeScript 1.6.3
var ControllerManager, FrontEnd, FuncDetails, _;

_ = require('underscore');

ControllerManager = require('./manager');

FuncDetails = require('./func-details');

module.exports = FrontEnd = {
  registerRoutes: function(app) {
    var controller, _i, _len, _ref;
    _ref = ControllerManager.controllers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      controller = _ref[_i];
      controller.registerRoutes(app);
    }
    return app.get('/js/lib/ez-routes.js', function(req, res) {
      var frontEndJS;
      frontEndJS = FrontEnd.getFrontEndMethods();
      res.setHeader('Content-Type', 'application/x-javascript; charset=UTF-8');
      return res.end(frontEndJS);
    });
  },
  getFrontEndMethods: function() {
    var EZController, argString, controller, controllerDetails, funcDetails, funcName, funcString, routes;
    routes = ControllerManager.getAllRoutes();
    EZController = {};
    for (controller in routes) {
      controllerDetails = routes[controller];
      EZController._extractData = FuncDetails.argsToData;
      EZController._constructPath = function(pattern, data) {
        var param, params, value, variable, variables;
        params = pattern.split('/');
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = params.length; _i < _len; _i++) {
            param = params[_i];
            if (variables = param.match(/^:(.*?)(\(.*?\))?$/)) {
              variable = variables[1];
              value = data[variable];
              delete data[variable];
              _results.push(value);
            } else {
              _results.push(param);
            }
          }
          return _results;
        })()).join("/");
      };
      EZController._constructQuery = function(data) {
        var key, result, value;
        result = (function() {
          var _ref, _results;
          _ref = data || {};
          _results = [];
          for (value in _ref) {
            key = _ref[value];
            _results.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
          }
          return _results;
        })();
        if (result.length > 0) {
          return "?" + result.join("&");
        } else {
          return "";
        }
      };
      EZController._isFunction = function(obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
      };
      EZController._makeRequest = function(routeDetails, args) {
        var cb, data, path, query, xmlhttp;
        cb = EZController._isFunction(args[args.length - 1]) ? args[args.length - 1] : function() {};
        xmlhttp = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
        data = EZController._extractData(routeDetails.argList, args);
        path = EZController._constructPath(routeDetails.pattern, data);
        xmlhttp.onreadystatechange = function() {
          if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
            return cb(JSON.parse(xmlhttp.responseText));
          }
        };
        if (routeDetails.method === "get") {
          query = EZController._constructQuery(data);
          xmlhttp.open(routeDetails.method, path + query, true);
          return xmlhttp.send();
        } else {
          xmlhttp.open(routeDetails.method, path, true);
          xmlhttp.setRequestHeader("Content-type", "application/json");
          return xmlhttp.send(JSON.stringify(data));
        }
      };
      EZController[controller] = {};
      EZController[controller]._routeDetails = {};
      for (funcName in controllerDetails) {
        funcDetails = controllerDetails[funcName];
        argString = FuncDetails.extractArgumentString(funcDetails.logic);
        EZController[controller]._routeDetails[funcName] = {
          pattern: funcDetails.pattern,
          usesId: funcDetails.usesId,
          method: funcDetails.method,
          argList: FuncDetails.extractArguments(funcDetails.logic)
        };
        funcString = "(function(" + argString + ") {\n" + "	return EZController._makeRequest(this._routeDetails['" + funcName + "'], arguments);\n" + "});";
        EZController[controller][funcName] = eval(funcString);
      }
    }
    return this.convertToFrontEnd('EZController', EZController);
  },
  convertToFrontEnd: function(object_name, object) {
    var output;
    output = "var ";
    output += object_name + " = (function() {\n";
    output += "\treturn " + this.convertToFrontEndRaw(object);
    output += "\n})();";
    return output;
  },
  convertToFrontEndRaw: function(object, depth) {
    var field, lastNewLine, object_item, output, tabs, tabs2, value;
    if (depth == null) {
      depth = 1;
    }
    tabs = this.getTabs(depth);
    tabs2 = this.getTabs(depth + 1);
    if (_.isFunction(object)) {
      output = object.toString().replace(/\n\s*/mg, '\n' + tabs2);
      lastNewLine = output.indexOf("\n");
      return output = output.substring(0, lastNewLine) + output.substring(lastNewLine).replace(/\n\s*/m, "\n" + tabs);
    } else if (_.isArray(object)) {
      output = "[\n";
      output += tabs2 + ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = object.length; _i < _len; _i++) {
          object_item = object[_i];
          _results.push(this.convertToFrontEndRaw(object_item, depth + 1));
        }
        return _results;
      }).call(this)).join(",\n" + tabs2) + "\n";
      output += tabs + "]";
      return output;
    } else if (_.isObject(object)) {
      output = "{\n";
      output += tabs2 + ((function() {
        var _results;
        _results = [];
        for (field in object) {
          value = object[field];
          _results.push(field + ": " + this.convertToFrontEndRaw(value, depth + 1));
        }
        return _results;
      }).call(this)).join(",\n" + tabs2) + "\n";
      output += tabs + "}";
      return output;
    } else if (_.isNumber(object) || _.isBoolean(object)) {
      return "" + object;
    } else if (_.isString(object)) {
      return "'" + object + "'";
    } else {
      return 'undefined';
    }
  },
  getTabs: _.memoize(function(depth) {
    return ((function() {
      var _results;
      _results = [];
      while (depth--) {
        _results.push("\t");
      }
      return _results;
    })()).join("");
  })
};

console.log((function() {
  return console.log('gah1');
}).toString().replace(/\n\s*/mg, "\n\t\t"));
