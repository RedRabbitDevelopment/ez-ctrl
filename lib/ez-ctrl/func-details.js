// Generated by CoffeeScript 1.10.0
(function() {
  var FuncDetails, _;

  _ = require('lodash');

  module.exports = FuncDetails = {
    extractArguments: function(fn) {
      var FN_ARG, FN_ARGS, FN_ARG_SPLIT, STRIP_COMMENTS, arg, argDecl, argsList, fnText, j, len, ref;
      FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
      FN_ARG_SPLIT = /,/;
      FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
      STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
      if (_.isFunction(fn)) {
        if (!(argsList = fn.argsList)) {
          argsList = [];
          fnText = fn.toString().replace(STRIP_COMMENTS, '');
          argDecl = fnText.match(FN_ARGS);
          ref = argDecl[1].split(FN_ARG_SPLIT);
          for (j = 0, len = ref.length; j < len; j++) {
            arg = ref[j];
            arg.replace(FN_ARG, function(all, lodash, name) {
              return argsList.push(name);
            });
          }
          fn.argsList = argsList;
        }
        return argsList;
      } else {
        return null;
      }
    },
    dataToArgs: function(fn, data) {
      var _dataPosition, arg, argData, args, i, unseenData;
      args = FuncDetails.extractArguments(fn);
      argData = [];
      unseenData = _.extend({}, data);
      argData = (function() {
        var j, len, ref, results;
        ref = args || [];
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          arg = ref[i];
          if (arg === "_data") {
            _dataPosition = i;
            results.push(null);
          } else {
            delete unseenData[arg];
            results.push(data[arg]);
          }
        }
        return results;
      })();
      if (_dataPosition != null) {
        argData[_dataPosition] = unseenData;
      }
      return argData;
    },
    argsToData: function(argList, args) {
      var argString, data, field, i, j, len, ref, ref1, value;
      data = {};
      ref = argList || [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        argString = ref[i];
        if (argString === "_data") {
          ref1 = args[i];
          for (field in ref1) {
            value = ref1[field];
            data[field] = value;
          }
        } else {
          data[argString] = args[i];
        }
      }
      return data;
    },
    extractArgumentString: function(fn) {
      var FN_ARGS;
      FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
      return fn.toString().match(FN_ARGS)[1].replace(/\r/g, "");
    }
  };

}).call(this);
